{
  "version": 3,
  "sources": ["../../../src/components/bs5/accordion/accordion.functions.js", "../../../src/components/bs5/video/video.functions.js", "../../../src/main.js"],
  "sourcesContent": ["/**\n * Toggle all accordion elements\n *\n * @memberof module:Accordion\n *\n * @param  {Object}  event - The event that triggered this function.\n * @returns {void}\n */\nexport function accordionToggleAll(event) {\n  // stop event propagation\n  try {\n    window.event.cancelBubble = true;\n    event.stopPropagation();\n  } catch (error) {\n    //error message\n  }\n\n  let toggleAllButton = event.target;\n  // find the accordion wrapper\n  let wrapper = toggleAllButton.closest(\".accordion-group\");\n  // get all the accordion buttons\n  let accordionButtons = wrapper.querySelectorAll(\".accordion-button\");\n\n  // Check if opened or closed\n  if (toggleAllButton.classList.contains(\"accordion-toggle-btn--closed\")) {\n    toggleAllButton.classList.remove(\"accordion-toggle-btn--closed\");\n    toggleAllButton.classList.add(\"accordion-toggle-btn--open\");\n    toggleAllButton.textContent = \"Close all\";\n    accordionButtons.forEach((button) => {\n      if (button.matches(\".collapsed\")) button.click();\n    });\n  } else if (toggleAllButton.classList.contains(\"accordion-toggle-btn--open\")) {\n    toggleAllButton.classList.remove(\"accordion-toggle-btn--open\");\n    toggleAllButton.classList.add(\"accordion-toggle-btn--closed\");\n    toggleAllButton.textContent = \"Open all\";\n    accordionButtons.forEach((button) => {\n      if (button.matches(\":not(.collapsed)\")) button.click();\n    });\n  }\n}\n\n/**\n * Updates toggle all button if all panels are open/closed individually.\n *\n * @memberof module:Accordion\n *\n * @param {Object} event - The event that triggered this function.\n * @returns {void}\n */\nexport function accordionToggleAllButtonState(event) {\n  // stop event propagation\n  try {\n    window.event.cancelBubble = true;\n    event.stopPropagation();\n  } catch (error) {\n    //error message\n  }\n\n  let accordionGroup = event.target.closest(\".accordion-group\"),\n    toggleAllButton = accordionGroup.querySelector(\".accordion-toggle-btn\");\n\n  if (\n    toggleAllButton.classList.contains(\"accordion-toggle-btn--closed\") &&\n    accordionGroup.querySelectorAll(\".accordion-button.collapsed\").length == 0\n  ) {\n    toggleAllButton.classList.remove(\"accordion-toggle-btn--closed\");\n    toggleAllButton.classList.add(\"accordion-toggle-btn--open\");\n    toggleAllButton.textContent = \"Close all\";\n  } else if (\n    toggleAllButton.classList.contains(\"accordion-toggle-btn--open\") &&\n    accordionGroup.querySelectorAll(\".accordion-button.collapsed\").length > 0\n  ) {\n    toggleAllButton.classList.remove(\"accordion-toggle-btn--open\");\n    toggleAllButton.classList.add(\"accordion-toggle-btn--closed\");\n    toggleAllButton.textContent = \"Open all\";\n  }\n}\n\n/**\n * Open and scroll to an accordion panel specified via URL hash.\n *\n * @memberof module:Accordion\n *\n * @param {Object} event - (optional) The event that triggered this function.\n * @returns {void}\n */\nexport function accordionHashLinks (event) {\n  let urlHash = window.location.hash,\n    urlHashId = urlHash.substring(1),\n    cleanHash = filterSpecialChar(urlHash);\n\n  if (cleanHash.length > 0) {\n    let targetElement = document.querySelector(`#collapse-${urlHashId}`),\n      targetPanelButton = false;\n\n    // Stop default hash link behaviour if target matches current hash location.\n    if (event &&\n      ((event.type === 'hashchange' && event.newURL === event.oldURL) ||\n      (event.type === 'click' && event.target.hash === urlHash))\n    ) {\n      event.preventDefault();\n    }\n\n    // ID matching\n    if (targetElement && targetElement.closest('.accordion-item')) {\n      targetPanelButton = targetElement.closest(\".accordion-item\").querySelector(\".accordion-button\");\n    }\n    // Title matching\n    else {\n      let accordionButtons = document.querySelectorAll(\".accordion-button\");\n\n      if (event && event.type === 'click') {\n        cleanHash = filterSpecialChar(event.target.hash);\n      }\n\n      targetPanelButton = Array.from(accordionButtons).find((button) => filterSpecialChar(button.innerText) === cleanHash);\n    }\n\n    if (targetPanelButton){\n      if (targetPanelButton.matches(\".collapsed\")) targetPanelButton.click();\n\n      window.scrollTo(0, targetPanelButton.getBoundingClientRect().top +\n      document.documentElement.scrollTop);\n    }\n  }\n}\n\n/**\n * filterSpecialChar\n * @param {string} value - value to filter\n * @return {undefined}\n **/\nfunction filterSpecialChar(value) {\n  return decodeURI(value.toLowerCase().replace(/[^a-zA-Z0-9/]/g, ''));\n}\n", "/**\n * Show and play the embedded video\n *\n * @memberof module:Video\n *\n * @param  {Object}  event - The event that triggered this function.\n * @returns {void}\n */\nexport function videoEmbedPlay(event) {\n  event.preventDefault()\n\n  const thumbnail = event.target,\n    component = thumbnail.closest(\".video\"),\n    iframe = component.querySelector(\".video-embed iframe\")\n\n  component.classList.remove(\"not-ready\")\n\n  if (\n    !iframe.classList.contains(\"video-custom\")\n  ) {\n    iframe.src = `${iframe.src}&autoplay=1`;\n  }\n\n  iframe.focus()\n\n}\n\n/**\n * Toggle the title of the video transcript accordion\n *\n * @memberof module:Video\n *\n * @param  {Object}  event - The event that triggered this function.\n * @returns {void}\n */\nexport function videoTranscriptTitle(event) {\n  const accordionButton = event.target\n\n  if (accordionButton.classList.contains('collapsed')) {\n    accordionButton.textContent = \"Show transcript\"\n  }\n  else {\n    accordionButton.textContent = \"Hide transcript\"\n  }\n\n}\n", "import {\n  accordionToggleAll,\n  accordionToggleAllButtonState,\n  accordionHashLinks,\n} from \"./components/bs5/accordion/accordion.functions\";\n\nimport {\n  videoEmbedPlay,\n  videoTranscriptTitle,\n} from \"./components/bs5/video/video.functions\";\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  (() => {\n    // Accordion\n    let accordionToggleButton = document.querySelectorAll(\".accordion-toggle-btn\");\n\n    accordionToggleButton.forEach(function (toggleButton) {\n      toggleButton.addEventListener(\"click\", accordionToggleAll);\n\n      let accordionButtons = toggleButton\n        .closest(\".accordion-group\")\n        .querySelectorAll(\".accordion-button\");\n\n      accordionButtons.forEach(function (button) {\n        button.addEventListener(\"click\", accordionToggleAllButtonState);\n      });\n    });\n\n    let inPageLinks = document.querySelectorAll('a[href^=\"#\"]');\n\n    accordionHashLinks();\n    window.onhashchange = accordionHashLinks;\n    inPageLinks.forEach(function (link) {\n      link.addEventListener(\"click\", accordionHashLinks);\n    });\n\n\n    // Video\n    let videoThumbnails = document.querySelectorAll('.video-thumbnail');\n\n    videoThumbnails.forEach(function (thumbnail) {\n      thumbnail.addEventListener(\"click\", videoEmbedPlay)\n    })\n\n    let videoTranscripts = document.querySelectorAll('.video .accordion .accordion-button');\n\n    videoTranscripts.forEach(function (transcript) {\n      transcript.addEventListener(\"click\", videoTranscriptTitle)\n    })\n\n  })();\n});\n"],
  "mappings": "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",
  "names": ["accordionToggleAll", "event", "error", "toggleAllButton", "accordionButtons", "button", "accordionToggleAllButtonState", "accordionGroup", "accordionHashLinks", "urlHash", "urlHashId", "cleanHash", "filterSpecialChar", "targetElement", "targetPanelButton", "value", "videoEmbedPlay", "event", "thumbnail", "component", "iframe", "videoTranscriptTitle", "accordionButton", "toggleButton", "accordionToggleAll", "button", "accordionToggleAllButtonState", "inPageLinks", "accordionHashLinks", "link", "thumbnail", "videoEmbedPlay", "transcript", "videoTranscriptTitle"]
}
